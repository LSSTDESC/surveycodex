{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to galcheat \u00b6 galcheat is a tiny package containing useful parameters from main galaxy surveys ( with units ). The goal of this project is to provide a Python library with minimal dependencies that centralises galaxy survey properties with adequate reference. Such information tends to be scattered in many places or is often copy/pasted without all of the relevant information like units or sources. Command line interface \u00b6 Pretty print the available surveys and associated filters in the terminal galcheat Options \u00b6 -s <survey> : print information for a given survey --refs : print the source for each parameter -h, --help : get help Examples \u00b6 galcheat -s LSST # LSST info galcheat --refs # all surveys info with refs galcheat --refs -s HSC # HSC info with refs Installation \u00b6 python -m pip install -U galcheat Optional installation \u00b6 Scripts \u00b6 To run the Python scripts from the script folder, use the extra install python -m pip install -U galcheat [ scripts ] Developers \u00b6 The developer tools needed to perform tests and linting and compile the docs locally can be installed with python -m pip install -U galcheat [ dev ]","title":"Index"},{"location":"index.html#welcome-to-galcheat","text":"galcheat is a tiny package containing useful parameters from main galaxy surveys ( with units ). The goal of this project is to provide a Python library with minimal dependencies that centralises galaxy survey properties with adequate reference. Such information tends to be scattered in many places or is often copy/pasted without all of the relevant information like units or sources.","title":"Welcome to galcheat"},{"location":"index.html#command-line-interface","text":"Pretty print the available surveys and associated filters in the terminal galcheat","title":"Command line interface"},{"location":"index.html#options","text":"-s <survey> : print information for a given survey --refs : print the source for each parameter -h, --help : get help","title":"Options"},{"location":"index.html#examples","text":"galcheat -s LSST # LSST info galcheat --refs # all surveys info with refs galcheat --refs -s HSC # HSC info with refs","title":"Examples"},{"location":"index.html#installation","text":"python -m pip install -U galcheat","title":"Installation"},{"location":"index.html#optional-installation","text":"","title":"Optional installation"},{"location":"index.html#scripts","text":"To run the Python scripts from the script folder, use the extra install python -m pip install -U galcheat [ scripts ]","title":"Scripts"},{"location":"index.html#developers","text":"The developer tools needed to perform tests and linting and compile the docs locally can be installed with python -m pip install -U galcheat [ dev ]","title":"Developers"},{"location":"parameters.html","text":"galcheat supported parameters \u00b6 The following page describes the parameters of the photometric surveys and their filters exposed in galcheat, what type and unit they should be specified with. Survey parameters \u00b6 Input parameters \u00b6 The following parameters are required in the YAML file describing any survey to build the Survey class in galcheat . parameter name type units description name str \u2013 The classical name or abbreviation for the survey. Most often this is how the survey is referred to. In case of an ambiguity, for instance when a survey has several instruments, the name of the instrument should be added as a suffix (e.g. Euclid_VIS ). description str \u2013 A bit of context around the survey: on which telescope, with which instrument, wide survey or a specific deep field. pixel_scale float arcsec / pixel Size of a square pixel on the sky. gain float e - / ADU Conversion factor between the photo-electrons received by the camera and the digital counts after the amplification of the electronics. mirror_diameter float m Primary mirror diameter, in meters. obscuration float dimensionless Proportion of the total area of the telescope that is obscured by the position of secondary mirrors, lenses, camera, etc. This parameter is used to compute the effective area of the telescope. zeropoint_airmass float dimensionless Airmass value at which the zeropoint is computed. The airmass is commonly defined as the optical path length through the atmosphere relative to the zenith path length. For space surveys, this value is set to 0.0. references dict[str] \u2013 mandatory but can be left as an empty string \u2013 Source of each parameter value (survey or filter), specified as a link (to an article or website) and a comment string. See the bottom the dummy YAML file for layout. Computed parameters \u00b6 The following parameters are computed after initialisation of the Survey class, from the mandatory info . parameter name type units description available_filters list[str] \u2013 List of available filter names for the survey. effective area float m 2 Actual area receiving light after taking into account the size of the primary mirror and the obscuration. Filter parameters \u00b6 The following parameters are required in the YAML file describing any filter of a given survey, to build the Filter class in galcheat . parameter name type units description name str \u2013 Name of the filter sky_brightness float mag / arcsec 2 Average sky brightness computed for the survey and this filter. The moon conditions under which this number was computed will be given as a comment in the yaml file. full_exposure_time int/float s Average exposure time of the filter on the same spot in the sky over the course of the survey. psf_fwhm float arcsec Average full width at half-maximum (FWHM) of the point spread function (PSF) over the filter. zeropoint float mag The zeropoint value for most surveys is a reference magnitude computed as the magnitude in the AB system (see this reference ) collected on the instrument effective area in one second. It takes into account the filter bandwidth and a classical atmosphere for ground based surveys, using the speclite library, at the airmass given by the survey zeropoint_airmass . For the remaining surveys it is extracted from corresponding the references (see references parameter). effective_wavelength float nm optional \u2013 Wavelength computed as a weighted average of the full passband throughput over the wavelength range. The throughput takes into account the transmission of the filter, the transmittance of the optics, the CCD efficiency as well as a standard atmospheric extinction model. YAML file layout \u00b6 Directives \u00b6 The information for a given survey should be provided as an individual YAML file, with the following layout. survey information first list of filters below references last one parameter per line strings should be quoted with \" \" indentation (2 spaces) means sub-list comments (starts with # ) are put on new lines Example \u00b6 An toy example for a dummy survey called Survey42 with two filters a and b is shown below. # Content of Survey42.yaml name : \"Survey42\" description : \"The Survey42 was done on the XXX telescope with the YYY instrument\" pixel_scale : 0.2 gain : 2.0 mirror_diameter : 4.2 obscuration : 0.2 zeropoint_airmass : 1.2 filters : a : name : \"a\" sky_brightness : 19.4 full_exposure_time : 500 zeropoint : 26.90 psf_fwhm : 1.1 effective_wavelength : 500.00 b : name : \"b\" sky_brightness : 18.6 full_exposure_time : 500 zeropoint : 27.36 psf_fwhm : 1.2 effective_wavelength : 600.00 references : pixel_scale : link : \"https://link-to-the-pixelscale-ref.com\" comment : \"See section 2.4\" gain : link : \"https://link-to-the-gain-info.org\" comment : \"\" psf_fwhm : link : \"https://link-to-filters-refs.org\" comment : \"\" # goal is to have a reference per parameter, survey or filter-wise...","title":"Parameters"},{"location":"parameters.html#galcheat-supported-parameters","text":"The following page describes the parameters of the photometric surveys and their filters exposed in galcheat, what type and unit they should be specified with.","title":"galcheat supported parameters"},{"location":"parameters.html#survey-parameters","text":"","title":"Survey parameters"},{"location":"parameters.html#input-parameters","text":"The following parameters are required in the YAML file describing any survey to build the Survey class in galcheat . parameter name type units description name str \u2013 The classical name or abbreviation for the survey. Most often this is how the survey is referred to. In case of an ambiguity, for instance when a survey has several instruments, the name of the instrument should be added as a suffix (e.g. Euclid_VIS ). description str \u2013 A bit of context around the survey: on which telescope, with which instrument, wide survey or a specific deep field. pixel_scale float arcsec / pixel Size of a square pixel on the sky. gain float e - / ADU Conversion factor between the photo-electrons received by the camera and the digital counts after the amplification of the electronics. mirror_diameter float m Primary mirror diameter, in meters. obscuration float dimensionless Proportion of the total area of the telescope that is obscured by the position of secondary mirrors, lenses, camera, etc. This parameter is used to compute the effective area of the telescope. zeropoint_airmass float dimensionless Airmass value at which the zeropoint is computed. The airmass is commonly defined as the optical path length through the atmosphere relative to the zenith path length. For space surveys, this value is set to 0.0. references dict[str] \u2013 mandatory but can be left as an empty string \u2013 Source of each parameter value (survey or filter), specified as a link (to an article or website) and a comment string. See the bottom the dummy YAML file for layout.","title":"Input parameters"},{"location":"parameters.html#computed-parameters","text":"The following parameters are computed after initialisation of the Survey class, from the mandatory info . parameter name type units description available_filters list[str] \u2013 List of available filter names for the survey. effective area float m 2 Actual area receiving light after taking into account the size of the primary mirror and the obscuration.","title":"Computed parameters"},{"location":"parameters.html#filter-parameters","text":"The following parameters are required in the YAML file describing any filter of a given survey, to build the Filter class in galcheat . parameter name type units description name str \u2013 Name of the filter sky_brightness float mag / arcsec 2 Average sky brightness computed for the survey and this filter. The moon conditions under which this number was computed will be given as a comment in the yaml file. full_exposure_time int/float s Average exposure time of the filter on the same spot in the sky over the course of the survey. psf_fwhm float arcsec Average full width at half-maximum (FWHM) of the point spread function (PSF) over the filter. zeropoint float mag The zeropoint value for most surveys is a reference magnitude computed as the magnitude in the AB system (see this reference ) collected on the instrument effective area in one second. It takes into account the filter bandwidth and a classical atmosphere for ground based surveys, using the speclite library, at the airmass given by the survey zeropoint_airmass . For the remaining surveys it is extracted from corresponding the references (see references parameter). effective_wavelength float nm optional \u2013 Wavelength computed as a weighted average of the full passband throughput over the wavelength range. The throughput takes into account the transmission of the filter, the transmittance of the optics, the CCD efficiency as well as a standard atmospheric extinction model.","title":"Filter parameters"},{"location":"parameters.html#yaml-file-layout","text":"","title":"YAML file layout"},{"location":"parameters.html#directives","text":"The information for a given survey should be provided as an individual YAML file, with the following layout. survey information first list of filters below references last one parameter per line strings should be quoted with \" \" indentation (2 spaces) means sub-list comments (starts with # ) are put on new lines","title":"Directives"},{"location":"parameters.html#example","text":"An toy example for a dummy survey called Survey42 with two filters a and b is shown below. # Content of Survey42.yaml name : \"Survey42\" description : \"The Survey42 was done on the XXX telescope with the YYY instrument\" pixel_scale : 0.2 gain : 2.0 mirror_diameter : 4.2 obscuration : 0.2 zeropoint_airmass : 1.2 filters : a : name : \"a\" sky_brightness : 19.4 full_exposure_time : 500 zeropoint : 26.90 psf_fwhm : 1.1 effective_wavelength : 500.00 b : name : \"b\" sky_brightness : 18.6 full_exposure_time : 500 zeropoint : 27.36 psf_fwhm : 1.2 effective_wavelength : 600.00 references : pixel_scale : link : \"https://link-to-the-pixelscale-ref.com\" comment : \"See section 2.4\" gain : link : \"https://link-to-the-gain-info.org\" comment : \"\" psf_fwhm : link : \"https://link-to-filters-refs.org\" comment : \"\" # goal is to have a reference per parameter, survey or filter-wise...","title":"Example"},{"location":"api/filter.html","text":"galcheat.filter \u00b6 Filter dataclass \u00b6 A dataclass containing the main filter parameters effective_wavelength : Optional [ astropy . units . quantity . Quantity ] dataclass-field \u00b6 Filter effective wavelength computed from the complete throughput information full_exposure_time : Quantity dataclass-field \u00b6 Mean time spent on the sky on a random survey location name : str dataclass-field \u00b6 The filter name psf_fwhm : Quantity dataclass-field \u00b6 The full-width at half maximum of the PSF sky_brightness : Quantity dataclass-field \u00b6 Mean sky brightness zeropoint : Quantity dataclass-field \u00b6 The zeropoint magnitude computed with the speclite library from_dict ( filter_info ) classmethod \u00b6 Constructor for the Filter dataclass Makes sure each of the filter attributes gets the appropriate units to improve definition and avoid confusion and conversion issues. Parameters: Name Type Description Default filter_info dict Dictionary with the filter informations required Returns: Type Description Filter A Filter object filled with the given information","title":"galcheat.filter"},{"location":"api/filter.html#galcheatfilter","text":"","title":"galcheat.filter"},{"location":"api/filter.html#galcheat.filter.Filter","text":"A dataclass containing the main filter parameters","title":"Filter"},{"location":"api/filter.html#galcheat.filter.Filter.effective_wavelength","text":"Filter effective wavelength computed from the complete throughput information","title":"effective_wavelength"},{"location":"api/filter.html#galcheat.filter.Filter.full_exposure_time","text":"Mean time spent on the sky on a random survey location","title":"full_exposure_time"},{"location":"api/filter.html#galcheat.filter.Filter.name","text":"The filter name","title":"name"},{"location":"api/filter.html#galcheat.filter.Filter.psf_fwhm","text":"The full-width at half maximum of the PSF","title":"psf_fwhm"},{"location":"api/filter.html#galcheat.filter.Filter.sky_brightness","text":"Mean sky brightness","title":"sky_brightness"},{"location":"api/filter.html#galcheat.filter.Filter.zeropoint","text":"The zeropoint magnitude computed with the speclite library","title":"zeropoint"},{"location":"api/filter.html#galcheat.filter.Filter.from_dict","text":"Constructor for the Filter dataclass Makes sure each of the filter attributes gets the appropriate units to improve definition and avoid confusion and conversion issues. Parameters: Name Type Description Default filter_info dict Dictionary with the filter informations required Returns: Type Description Filter A Filter object filled with the given information","title":"from_dict()"},{"location":"api/helpers.html","text":"galcheat.helpers \u00b6","title":"galcheat.helpers"},{"location":"api/helpers.html#galcheathelpers","text":"","title":"galcheat.helpers"},{"location":"api/survey.html","text":"galcheat.survey \u00b6 Survey dataclass \u00b6 A dataclass for storing the parameters of a survey available_filters : List [ str ] dataclass-field \u00b6 The list of survey filters description : str dataclass-field \u00b6 The survey description with telescope/instrument information effective_area : Quantity dataclass-field \u00b6 The survey instrument effective area on the sky computed from the obscuration gain : Quantity dataclass-field \u00b6 The gain in electron/ADU mirror_diameter : Quantity dataclass-field \u00b6 The mirror diameter name : str dataclass-field \u00b6 The survey name obscuration : Quantity dataclass-field \u00b6 The total obscuration created by the instrument pieces pixel_scale : Quantity dataclass-field \u00b6 The pixel scale of the survey references : Dict [ str , Dict [ str , str ]] dataclass-field \u00b6 Dictionary of references for each parameter specified in galcheat zeropoint_airmass : Quantity dataclass-field \u00b6 The zeropoint airmass __post_init__ ( self ) special \u00b6 Set attributes computed after class is constructed from_yaml ( yaml_file ) classmethod \u00b6 Constructor for the Survey class Parameters: Name Type Description Default yaml_file str Filepath to YAML file containing the survey info required Returns: Type Description Survey A Survey instance filled with the information as attributes get_filter ( self , filter_name ) \u00b6 Getter method to retrieve a Filter object Parameters: Name Type Description Default filter_name str Name of a filter chosen among the available_filters attribute required Exceptions: Type Description ValueError The requested filter does not exist or is not available in galcheat Returns: Type Description Filter Corresponding Filter dataclass","title":"galcheat.survey"},{"location":"api/survey.html#galcheatsurvey","text":"","title":"galcheat.survey"},{"location":"api/survey.html#galcheat.survey.Survey","text":"A dataclass for storing the parameters of a survey","title":"Survey"},{"location":"api/survey.html#galcheat.survey.Survey.available_filters","text":"The list of survey filters","title":"available_filters"},{"location":"api/survey.html#galcheat.survey.Survey.description","text":"The survey description with telescope/instrument information","title":"description"},{"location":"api/survey.html#galcheat.survey.Survey.effective_area","text":"The survey instrument effective area on the sky computed from the obscuration","title":"effective_area"},{"location":"api/survey.html#galcheat.survey.Survey.gain","text":"The gain in electron/ADU","title":"gain"},{"location":"api/survey.html#galcheat.survey.Survey.mirror_diameter","text":"The mirror diameter","title":"mirror_diameter"},{"location":"api/survey.html#galcheat.survey.Survey.name","text":"The survey name","title":"name"},{"location":"api/survey.html#galcheat.survey.Survey.obscuration","text":"The total obscuration created by the instrument pieces","title":"obscuration"},{"location":"api/survey.html#galcheat.survey.Survey.pixel_scale","text":"The pixel scale of the survey","title":"pixel_scale"},{"location":"api/survey.html#galcheat.survey.Survey.references","text":"Dictionary of references for each parameter specified in galcheat","title":"references"},{"location":"api/survey.html#galcheat.survey.Survey.zeropoint_airmass","text":"The zeropoint airmass","title":"zeropoint_airmass"},{"location":"api/survey.html#galcheat.survey.Survey.__post_init__","text":"Set attributes computed after class is constructed","title":"__post_init__()"},{"location":"api/survey.html#galcheat.survey.Survey.from_yaml","text":"Constructor for the Survey class Parameters: Name Type Description Default yaml_file str Filepath to YAML file containing the survey info required Returns: Type Description Survey A Survey instance filled with the information as attributes","title":"from_yaml()"},{"location":"api/survey.html#galcheat.survey.Survey.get_filter","text":"Getter method to retrieve a Filter object Parameters: Name Type Description Default filter_name str Name of a filter chosen among the available_filters attribute required Exceptions: Type Description ValueError The requested filter does not exist or is not available in galcheat Returns: Type Description Filter Corresponding Filter dataclass","title":"get_filter()"},{"location":"api/utilities.html","text":"galcheat.utilities \u00b6 mag2counts ( magnitude , survey , filter , exposure_time = None ) \u00b6 Convert source magnitude to electron counts for a given survey filter To perform the computation, we use the filter zeropoint computed with speclite at a given airmass under classical atmospheric conditions and by default integrated over the survey lifetime. An exposure time can be provided to compute the corresponding counts instead of the full filter exposure time. Expect a rough estimate from this calculation since e.g. it does not take into account the atmospheric extinction. Therefore the result is cast to an integer. Parameters: Name Type Description Default magnitude float magnitude of source required survey str or Survey Name of a given survey or Survey instance required filter str or Filter Name of the survey filter or Filter instance required exposure_time float or Quantity[float] Exposure time of the filter in seconds. If not provided, the full filter exposure time is used. None Examples: >>> from galcheat.utilities import mag2counts >>> mag2counts ( 24 , \"LSST\" , \"g\" ) < Quantity 121397 ct > Returns: Type Description Quantity[int] The corresponding flux in electron counts mean_sky_level ( survey , filter ) \u00b6 Computes the mean sky level for a given survey and a filter This computation uses the sky brightness parameter from galcheat, expressed as a magnitude per sky area, weights it by the pixel area and converts it to electron counts. Parameters: Name Type Description Default survey str or Survey Name of a given survey or Survey instance required filter str or Filter Name of the survey filter of Filter instance required Examples: >>> from galcheat.utilities import mean_sky_level >>> mean_sky_level ( \"LSST\" , \"g\" ) < Quantity 23241.84 ct > Returns: Type Description Quantity[float] The corresponding mean sky level in electron counts","title":"galcheat.utilities"},{"location":"api/utilities.html#galcheatutilities","text":"","title":"galcheat.utilities"},{"location":"api/utilities.html#galcheat.utilities.mag2counts","text":"Convert source magnitude to electron counts for a given survey filter To perform the computation, we use the filter zeropoint computed with speclite at a given airmass under classical atmospheric conditions and by default integrated over the survey lifetime. An exposure time can be provided to compute the corresponding counts instead of the full filter exposure time. Expect a rough estimate from this calculation since e.g. it does not take into account the atmospheric extinction. Therefore the result is cast to an integer. Parameters: Name Type Description Default magnitude float magnitude of source required survey str or Survey Name of a given survey or Survey instance required filter str or Filter Name of the survey filter or Filter instance required exposure_time float or Quantity[float] Exposure time of the filter in seconds. If not provided, the full filter exposure time is used. None Examples: >>> from galcheat.utilities import mag2counts >>> mag2counts ( 24 , \"LSST\" , \"g\" ) < Quantity 121397 ct > Returns: Type Description Quantity[int] The corresponding flux in electron counts","title":"mag2counts()"},{"location":"api/utilities.html#galcheat.utilities.mean_sky_level","text":"Computes the mean sky level for a given survey and a filter This computation uses the sky brightness parameter from galcheat, expressed as a magnitude per sky area, weights it by the pixel area and converts it to electron counts. Parameters: Name Type Description Default survey str or Survey Name of a given survey or Survey instance required filter str or Filter Name of the survey filter of Filter instance required Examples: >>> from galcheat.utilities import mean_sky_level >>> mean_sky_level ( \"LSST\" , \"g\" ) < Quantity 23241.84 ct > Returns: Type Description Quantity[float] The corresponding mean sky level in electron counts","title":"mean_sky_level()"},{"location":"guides/create-galaxy.html","text":"Simulate a simple galaxy with galcheat and GalSim \u00b6 In this tutorial, we will see how we can use the survey parameters in galcheat to create a simple elliptical galaxy with galsim. The galaxy will be convolved with a optical+atmospheric component PSF, include background and noise, and use the r-band filter of the LSST survey. Please note that galsim is not a galcheat dependency, so it must be installed separately to follow this guide. See here for galsim installation instructions. To draw the image at the end of the tutorial, matplotlib will also need to be installed separately. First, we import galsim and necessary functions from galcheat. import galsim import galcheat from galcheat import get_survey from galcheat import utilities import matplotlib.pyplot as plt import numpy as np Then, we specify the survey and filter from galcheat we will use. Along with galaxy parameters. # galcheat survey and filter. LSST = get_survey ( \"LSST\" ) r_band = LSST . get_filter ( \"r\" ) # galaxy model parameters mag = 22.0 # ab e1 = 0.2 e2 = 0.2 hlr = 1.2 # arcsecs Now we create a galaxy model and shear it. # get flux from magnitude using galcheat for LSST r-band. total_flux = mag2counts ( mag , LSST , r_band ) # get only the value of flux in desired units. total_flux = total_flux . to_value ( 'electron' ) # simple gaussian galaxy with ellipticity gal = galsim . Gaussian ( flux = total_flux , half_light_radius = hlr ) gal = gal . shear ( e1 = e1 , e2 = e2 ) Now we create a PSF, first the atmospheric component. fwhm = r_band . psf_fwhm . to_value ( \"arcsec\" ) atmospheric_psf_model = galsim . Kolmogorov ( fwhm = fwhm ) Then, the optical component. effective_wavelength = r_band . effective_wavelength . to_value ( \"angstrom\" ) obscuration = LSST . obscuration . value mirror_diameter = LSST . mirror_diameter . to_value ( \"m\" ) lam_over_diam = 3600 * np . degrees ( 1e-10 * effective_wavelength / mirror_diameter ) optical_psf_model = galsim . Airy ( lam_over_diam = lam_over_diam , obscuration = obscuration ) The full PSF is the convolution of both components. psf = galsim . Convolve ( atmospheric_psf_model , optical_psf_model ) We convolve it with the galaxy model conv_gal = galsim . Convolve ( gal , psf ) Finally, we add noise and background: # retrieve the sky level using galcheat. sky_level = utilities . mean_sky_level ( LSST , r_band ) . to_value ( 'electron' ) # add noise and background to image. pixel_scale = LSST . pixel_scale . to_value ( 'arcsec' ) generator = galsim . random . BaseDeviate ( seed = 0 ) noise = galsim . PoissonNoise ( rng = generator , sky_level = sky_level ) image = conv_gal . drawImage ( nx = 53 , ny = 53 , scale = pixel_scale ) image . addNoise ( noise ) Now image.array can be plotted to see the galaxy that was produced. plt . imshow ( image . array ) We get the following image:","title":"Simulate Galaxy with Galsim"},{"location":"guides/create-galaxy.html#simulate-a-simple-galaxy-with-galcheat-and-galsim","text":"In this tutorial, we will see how we can use the survey parameters in galcheat to create a simple elliptical galaxy with galsim. The galaxy will be convolved with a optical+atmospheric component PSF, include background and noise, and use the r-band filter of the LSST survey. Please note that galsim is not a galcheat dependency, so it must be installed separately to follow this guide. See here for galsim installation instructions. To draw the image at the end of the tutorial, matplotlib will also need to be installed separately. First, we import galsim and necessary functions from galcheat. import galsim import galcheat from galcheat import get_survey from galcheat import utilities import matplotlib.pyplot as plt import numpy as np Then, we specify the survey and filter from galcheat we will use. Along with galaxy parameters. # galcheat survey and filter. LSST = get_survey ( \"LSST\" ) r_band = LSST . get_filter ( \"r\" ) # galaxy model parameters mag = 22.0 # ab e1 = 0.2 e2 = 0.2 hlr = 1.2 # arcsecs Now we create a galaxy model and shear it. # get flux from magnitude using galcheat for LSST r-band. total_flux = mag2counts ( mag , LSST , r_band ) # get only the value of flux in desired units. total_flux = total_flux . to_value ( 'electron' ) # simple gaussian galaxy with ellipticity gal = galsim . Gaussian ( flux = total_flux , half_light_radius = hlr ) gal = gal . shear ( e1 = e1 , e2 = e2 ) Now we create a PSF, first the atmospheric component. fwhm = r_band . psf_fwhm . to_value ( \"arcsec\" ) atmospheric_psf_model = galsim . Kolmogorov ( fwhm = fwhm ) Then, the optical component. effective_wavelength = r_band . effective_wavelength . to_value ( \"angstrom\" ) obscuration = LSST . obscuration . value mirror_diameter = LSST . mirror_diameter . to_value ( \"m\" ) lam_over_diam = 3600 * np . degrees ( 1e-10 * effective_wavelength / mirror_diameter ) optical_psf_model = galsim . Airy ( lam_over_diam = lam_over_diam , obscuration = obscuration ) The full PSF is the convolution of both components. psf = galsim . Convolve ( atmospheric_psf_model , optical_psf_model ) We convolve it with the galaxy model conv_gal = galsim . Convolve ( gal , psf ) Finally, we add noise and background: # retrieve the sky level using galcheat. sky_level = utilities . mean_sky_level ( LSST , r_band ) . to_value ( 'electron' ) # add noise and background to image. pixel_scale = LSST . pixel_scale . to_value ( 'arcsec' ) generator = galsim . random . BaseDeviate ( seed = 0 ) noise = galsim . PoissonNoise ( rng = generator , sky_level = sky_level ) image = conv_gal . drawImage ( nx = 53 , ny = 53 , scale = pixel_scale ) image . addNoise ( noise ) Now image.array can be plotted to see the galaxy that was produced. plt . imshow ( image . array ) We get the following image:","title":"Simulate a simple galaxy with galcheat and GalSim"},{"location":"guides/getting-started.html","text":"Getting started \u00b6 # The list of available surveys from galcheat import available_surveys # Getter methods to retrieve a Survey of a Filter dataclass from galcheat import get_survey , get_filter LSST = get_survey ( \"LSST\" ) u_band = get_filter ( \"u\" , \"LSST\" ) # which is a proxy for u_band = LSST . get_filter ( \"u\" ) # Get the list of available filters LSST . available_filters # or as a dictionary with all `Filter` objects LSST . get_filters () # Both Survey and Filter classes have physical attributes LSST . mirror_diameter u_band . full_exposure_time # Filters are also attributes of a Survey LSST . filters . u . full_exposure_time # same attribute as above # These attributes are Astropy Quantity objects with units fwhm = u_band . psf_fwhm # The value in the original units is obtained as fwhm . value # or it can be converted to other units fwhm . to_value ( 'arcmin' )","title":"Getting Started"},{"location":"guides/getting-started.html#getting-started","text":"# The list of available surveys from galcheat import available_surveys # Getter methods to retrieve a Survey of a Filter dataclass from galcheat import get_survey , get_filter LSST = get_survey ( \"LSST\" ) u_band = get_filter ( \"u\" , \"LSST\" ) # which is a proxy for u_band = LSST . get_filter ( \"u\" ) # Get the list of available filters LSST . available_filters # or as a dictionary with all `Filter` objects LSST . get_filters () # Both Survey and Filter classes have physical attributes LSST . mirror_diameter u_band . full_exposure_time # Filters are also attributes of a Survey LSST . filters . u . full_exposure_time # same attribute as above # These attributes are Astropy Quantity objects with units fwhm = u_band . psf_fwhm # The value in the original units is obtained as fwhm . value # or it can be converted to other units fwhm . to_value ( 'arcmin' )","title":"Getting started"},{"location":"guides/heritage.html","text":"Extend galcheat objects \u00b6 Frozen dataclasses \u00b6 The goal of galcheat is to provide a sourced reference for survey parameters. Therefore the Survey and Filter objects have been implemented as frozen dataclasses. This means that trying to modify the attributes of an instance of a Survey or a Filter will raise a FrozenInstanceError . Nevertheless, one might possibly want to modify or extend the instances of the dataclasses found in galcheat for specific purposes. This can be achieved through inheritance. Inheritance \u00b6 A frozen dataclass creates a class for which the call to the __setattr__ method raises a FrozenInstanceError . A short way to bypass that feature is to inherit from the main class and modify the __setattr__ method to recover its classic behavior. class ExtensibleSurvey ( Survey ): def __setattr__ ( self , x , val ): self . __dict__ [ x ] = val The ExtensibleSurvey will behave just as the galcheat Survey and will be extendable or modifiable. This is also true for the Filter class. To be used at you own risk","title":"Extend galcheat objects"},{"location":"guides/heritage.html#extend-galcheat-objects","text":"","title":"Extend galcheat objects"},{"location":"guides/heritage.html#frozen-dataclasses","text":"The goal of galcheat is to provide a sourced reference for survey parameters. Therefore the Survey and Filter objects have been implemented as frozen dataclasses. This means that trying to modify the attributes of an instance of a Survey or a Filter will raise a FrozenInstanceError . Nevertheless, one might possibly want to modify or extend the instances of the dataclasses found in galcheat for specific purposes. This can be achieved through inheritance.","title":"Frozen dataclasses"},{"location":"guides/heritage.html#inheritance","text":"A frozen dataclass creates a class for which the call to the __setattr__ method raises a FrozenInstanceError . A short way to bypass that feature is to inherit from the main class and modify the __setattr__ method to recover its classic behavior. class ExtensibleSurvey ( Survey ): def __setattr__ ( self , x , val ): self . __dict__ [ x ] = val The ExtensibleSurvey will behave just as the galcheat Survey and will be extendable or modifiable. This is also true for the Filter class. To be used at you own risk","title":"Inheritance"}]}